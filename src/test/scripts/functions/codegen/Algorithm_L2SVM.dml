#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

X = read($1)
Y = read($2)
intercept = $3;
eps = $4;
maxiter = $5;

check_min = min(Y)
check_max = max(Y)
num_min = sum(ppred(Y, check_min, "=="))
num_max = sum(ppred(Y, check_max, "=="))
if(num_min + num_max != nrow(Y)) print("please check Y, it should contain only 2 labels")
else{
	if(check_min != -1 | check_max != +1) 
		Y = 2/(check_max - check_min)*Y - (check_min + check_max)/(check_max - check_min)
}

epsilon = eps
lambda = 0.001
maxiterations = maxiter
num_samples = nrow(X)
dimensions = ncol(X)

if (intercept == 1) {
	ones  = matrix(1, rows=num_samples, cols=1)
	X = append(X, ones);
}

num_rows_in_w = dimensions
if(intercept == 1){
	num_rows_in_w = num_rows_in_w + 1
}
w = matrix(0, rows=num_rows_in_w, cols=1)

g_old = t(X) %*% Y
s = g_old

Xw = matrix(0, rows=nrow(X), cols=1)
debug_str = "# Iter, Obj"
iter = 0
continue = 1
while(continue == 1 & iter < maxiterations)  {
	# minimizing primal obj along direction s
	step_sz = 0
	Xd = X %*% s
	wd = lambda * sum(w * s)
	dd = lambda * sum(s * s)
	continue1 = 1
	while(continue1 == 1){
		tmp_Xw = Xw + step_sz*Xd
		out = 1 - Y * (tmp_Xw)
		sv = ppred(out, 0, ">")
		out = out * sv
		g = wd + step_sz*dd - sum(out * Y * Xd)
		h = dd + sum(Xd * sv * Xd)
		step_sz = step_sz - g/h
		if (g*g/h < 0.0000000001){
			continue1 = 0
		}
	}
	
	#update weights
	w = w + step_sz*s
	Xw = Xw + step_sz*Xd
	
	out = 1 - Y * Xw
	sv = ppred(out, 0, ">")
	out = sv * out
	obj = 0.5 * sum(out * out) + lambda/2 * sum(w * w)
	g_new = t(X) %*% (out * Y) - lambda * w
	
	print("OBJ = " + obj)	
	tmp = sum(s * g_old)
	if(step_sz*tmp < epsilon*obj){
		continue = 0
	}
	
	#non-linear CG step
	be = sum(g_new * g_new)/sum(g_old * g_old)
	s = be * s + g_new
	g_old = g_new

	iter = iter + 1
}

write(w, $6, format="text")
