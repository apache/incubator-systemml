#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

# Arguments
# 'X': X (one column time series - there has to be an .mtd file associated to the src file!) 
# 'max_func_invoc': max_func_invoc (default 1000)
# 'p': p (non-seasonal AR order) (default 0)
# 'd': d (non-seasonal differencing order) (default 0)
# 'q': q (non-seasonal MA order) (default 0)
# 'P': P (seasonal AR order) (default 0)
# 'D': D (seasonal differencing order)(default 0)
# 'Q': Q (seasonal MA order)(default 0)
# 's': s (period in terms of number of time-steps) (default 1)
# 'include_mean': TRUE/FALSE (default FALSE)
# 'solver': must be either 'cg' for conjugate gradients method or 'jacobi' for jacobi method (default "jacobi")
# 'optim_method': must be either "neldermead" or "bfgs" (default "bfgs")
# 'dest': file name to store learnt parameters (default "arima-result.csv")
# 'result_format': the format of the destination file (default "csv") 

#TODO: Add external function to run ARIMA -> to create another dml file to

arima_residuals = function(Matrix[Double] weights, Matrix[Double] X, Integer p, Integer P, Integer q, Integer Q, Integer s, String solver) return (Matrix[Double] errs, Matrix[Double] combined_weights){
	
	#TODO: Add q and Q weights to combined_weights
	
	#Combining weights because of the definition of seasonal AR in R
	#https://stats.stackexchange.com/questions/112927/seasonal-vs-non-seasonal-coefficients-in-r-arima
	if (p>0 & P>0){
		combined_weights = rbind(weights, matrix(weights[1:p,] %*% t(weights[p+1:p+P,]), rows=p*P, cols=1))
	}
	else{
		combined_weights = weights
	}
	
	b = X[,2:ncol(X)]%*%combined_weights
	
	R = matrix(0, nrow(X), nrow(X))
	#TODO: use correct positions of q and Q weights (position might have changed)
	for(i in seq(1, q, 1)){
		d_ns = matrix(as.scalar(weights[P+p+i,1]), nrow(R)-i, 1)
		R[1+i:nrow(R),1:ncol(R)-i] = R[1+i:nrow(R),1:ncol(R)-i] + diag(d_ns)
	}
	
	for(i in seq(1, Q, 1)){
		err_ind_s = s*i
		d_s = matrix(as.scalar(weights[P+p+q+i,1]), nrow(R)-err_ind_s, 1)
		R[1+err_ind_s:nrow(R),1:ncol(R)-err_ind_s] = R[1+err_ind_s:nrow(R),1:ncol(R)-err_ind_s] + diag(d_s)
	}
  	
	#TODO: provide default dml "solve()" as well
	solution = eval(solver + "_solver", R, b, 0.01, 100)
	errs = X[,1] - solution
	#errs = solution - X[,1] 
}

arima_css = function(Matrix[Double] weights, Matrix[Double] X, Integer p, Integer P, Integer q, Integer Q, Integer s, String solver) return (Double obj){
	[errs, combined_weights] = arima_residuals(weights, X, p, P, q, Q, s, solver)
	obj = sum(errs*errs)
}

cg_solver = function (Matrix[Double] R, Matrix[Double] B, Double tolerance, Integer max_iterations) return (Matrix[Double] y_hat){
	y_hat = matrix(0, nrow(R), 1)
	iter = 0

	A = R + diag(matrix(1, rows=nrow(R), cols=1))
	Z = t(A)%*%A
	r = -(t(A)%*%B)
	p = -r
	norm_r2 = sum(r^2)
	
	continue = (norm_r2 != 0)
	
	while(iter < max_iterations & continue){
		q = Z%*%p
		alpha = norm_r2 / as.scalar(t(p) %*% q)
		y_hat += alpha * p
		r += alpha * q
		old_norm_r2 = norm_r2
		norm_r2 = sum(r^2)
		continue = (norm_r2 >= tolerance)
		beta = norm_r2 / old_norm_r2
		p = -r + beta * p
		iter += 1
	}
}

jacobi_solver = function (Matrix[Double] A, Matrix[Double] B, Double tolerance, Integer max_iterations) return (Matrix[Double] y_hat){
	
	y_hat = matrix(0, nrow(A), 1)
  	iter = 0
	diff = tolerance+1
	
	#checking for strict diagonal dominance
	#required for jacobi's method
  	check = sum(rowSums(abs(A)) >= 1)
	if(check > 0){
		warning("The matrix is not diagonal dominant. Suggest switching to an exact solver.")
	}
		
	while(iter < max_iterations & diff > tolerance){
		y_hat_new = B - A%*%y_hat
		diff = sum((y_hat_new-y_hat)^2)
		y_hat = y_hat_new
		iter += 1
	}
}

neldermead_optimizer = function (Matrix[Double] M, Integer max_iterations, Integer p, Integer P, Integer q, Integer Q, Integer s, String solver)return(Matrix[Double] best_point){
	nParam = p+P+q+Q
	simplex = cbind(matrix(0, nParam, 1), diag(matrix(0.1, nParam, 1)))
	objvals = matrix(0, 1, ncol(simplex))

	#TODO: remove debug output
	debug("Simplex:\n" + toString(simplex))

	parfor(i in seq(1,ncol(simplex))){
		objvals[1,i] = arima_css(simplex[,i], M, p, P, q, Q, s, solver)
	}

	#TODO: remove debug output
	debug("objvals:\n" + toString(objvals))


	#TODO: make this an optional parameter
	tol = 1.5 * 10^(-8) * as.scalar(objvals[1,1])

	num_func_invoc = ncol(simplex)
	
	continue = TRUE
	while(continue & num_func_invoc <= max_iterations){
		best_index = as.scalar(rowIndexMin(objvals))
		worst_index = as.scalar(rowIndexMax(objvals))
		
		best_obj_val = as.scalar(objvals[1,best_index])
		worst_obj_val = as.scalar(objvals[1,worst_index])
		
		continue = (worst_obj_val > best_obj_val + tol)

		debug("#Function calls::" + num_func_invoc + " OBJ: " + best_obj_val)
		
		c = (rowSums(simplex) - simplex[,worst_index])/(nrow(simplex))
		
		x_r = 2*c - simplex[,worst_index]
		obj_x_r = arima_css(x_r, M, p, P, q, Q, s, solver)
		num_func_invoc += 1
		
		if(obj_x_r < best_obj_val){
			x_e = 2*x_r - c
			obj_x_e = arima_css(x_e, M, p, P, q, Q, s, solver)
			num_func_invoc = num_func_invoc + 1
			
			simplex[,worst_index] = ifelse (obj_x_r <= obj_x_e, x_r, x_e)
			objvals[1,worst_index] = ifelse (obj_x_r <= obj_x_e, obj_x_r, obj_x_e)
		}else{
			if(obj_x_r < worst_obj_val){
				simplex[,worst_index] = x_r
				objvals[1,worst_index] = obj_x_r
			}
			
			x_c_in = (simplex[,worst_index] + c)/2
			obj_x_c_in = arima_css(x_c_in, M, p, P, q, Q, s, solver)
			num_func_invoc += 1
			
			if(obj_x_c_in < as.scalar(objvals[1,worst_index])){
				simplex[,worst_index] = x_c_in
				objvals[1,worst_index] = obj_x_c_in
			}else{
				if(obj_x_r >= worst_obj_val){
					best_point = simplex[,best_index]
					parfor(i4 in 1:ncol(simplex)){
						if(i4 != best_index){
							simplex[,i4] = (simplex[,i4] + best_point)/2
							objvals[1,i4] = arima_css(simplex[,i4], M, p, P, q, Q, s, solver)
						}
					}
					num_func_invoc += ncol(simplex) - 1
				}
			}
		}
	}

	debug ("best_index: "+ toString(best_index))
	best_point = simplex[,best_index]
}

gradArimaCSS = function(Matrix[Double] weights, Matrix[Double] X, Integer p, Integer P, Integer q, Integer Q, Integer s, String solver) return(Matrix[double] grad){
	[residuals, combined_weights] = arima_residuals(weights, X, p, P, q, Q, s, solver)
	
	res_A = t(-X[,2:ncol(X)]) %*% residuals
	grad = matrix(0, rows=p+P, cols=1)

	if (p > 0) grad[1:p,] = res_A[1:p,]
	if (P > 0) grad[p+1:p+P,] = res_A[p+1:p+P,]
	if (p>0 & P>0){		
		for(i in seq(1, p, 1)){
			permut = matrix(0, rows=p, cols=P)
			permut[i,] = t(combined_weights[p+1:p+P,])###!!!
			grad[i,1] = grad[i,1] + sum(res_A[p+P+1:nrow(res_A),] * matrix(permut, rows=p*P, cols=1))
		}

		for(i in seq(1, P, 1)){
			permut = matrix(0, rows=p, cols=P)
			permut[,i] = combined_weights[1:p,]###!!!!
			grad[p+i,1] = grad[p+i,1] + sum(res_A[p+P+1:nrow(res_A),] * matrix(permut, rows=p*P, cols=1))
		}
		
	}
}

L2norm = function (Matrix[Double] fx)return(Double norm){
	# L2 norm of descent direction at x
	# https://en.wikipedia.org/wiki/Norm_(mathematics)#p-norm
	norm = (sum(fx^2))^0.5 
}

#Bactracking paramters
#https://en.wikipedia.org/wiki/Backtracking_line_search
linesearch = function (Matrix[Double] searchDirection, Double fx,  Matrix[Double] x, Matrix[Double] M, Integer p, Integer P, Integer q, Integer Q, Integer s, String solver)return(Matrix[Double] xnew, Double fxnew, Double ak){
	#TODO: What are the best starting paramters?
	alpha = 0.0001
	r = 0.9
	
	#stepsize
	ak = 1
	
	xnew = x + ak*searchDirection
	fxnew = arima_css(xnew, M, p, P, q, Q, s, solver)
	
	#TODO: check if Armijo–Goldstein condition tests is used properly
	while(fxnew > fx + alpha*ak*as.scalar(t(searchDirection)%*%searchDirection)){ 
		ak = r*ak
		xnew = x + ak*searchDirection
		fxnew = arima_css(xnew, M, p, P, q, Q, s, solver)
	}
}

#Quasi Newton Optimizer: Broyden–Fletcher–Goldfarb–Shanno Algorithm
#https://en.wikipedia.org/wiki/Broyden%E2%80%93Fletcher%E2%80%93Goldfarb%E2%80%93Shanno_algorithm
bfgs_optimizer = function (Matrix[Double] M, Integer max_iterations, Integer p, Integer P, Integer q, Integer Q, Integer s, String solver)return(Matrix[Double] x){
	#TODO: Refactor this
	
	nParam = p+P+q+Q
	
	#'first guess' x should not be intitialized with 0, otherwise the norm of gx will equal 0 and the loop will not run
	x = matrix(0.5, nParam, 1)
	fx = arima_css(x, M, p, P, q, Q, s, solver)
	gx = gradArimaCSS(x, M, p, P, q, Q, s, solver)
	norm_gx = L2norm(gx)

	#The approximated inverse hessian 
	B = diag(matrix(1.0, nParam,1)) 	
	
	debug(" sum gx^2 " + sum(gx ^2))
	debug("arima_css initial " + fx)
		
	iter = 0
	tol = 1.5 * 10^(-8)
	diff = tol +1
	while(norm_gx > tol & iter < max_iterations & diff > tol){
		debug("bfgs_optimizer iterations " + iter)
		
		#1. + 2. step
		[xnew, fxnew, stepsize] = linesearch ((-B%*%gx), fx, x, M, p, P, q, Q, s, solver)
		gxnew = gradArimaCSS(xnew, M, p, P, q, Q, s, solver)
		
		#3. step
		ss = xnew - x # = stepsize * searchDirection
		x = xnew
		
		#4. step
		yk = gxnew - gx
		
		#5. step
		# inverse B for next step
		FT = as.scalar(t(ss)%*%yk + t(yk)%*%B%*%yk)*ss%*%t(ss)/as.scalar(t(ss)%*%yk)^2
		ST = (B%*%(yk%*%t(ss)) + (ss%*%t(yk))%*%B)/as.scalar(t(ss)%*%yk)
		B = B + FT - ST
		
		diff = abs(fx - fxnew)
		debug("next diff is " + diff)
		debug("arima css = " + fxnew + " with weights:\n" +toString(xnew, decimal=17))
		
		fx = fxnew
		gx = gxnew
		norm_gx = L2norm(gx)
		iter =+ 1
	}
	debug("global best " + fx)
}

readParamters = function (String default_solver, String default_optim_method, Integer default_max_func_invoc, Integer default_include_mean, Integer default_p, Integer default_d, Integer default_q, Integer default_P, Integer default_D, Integer default_Q, Integer default_s , String default_dest, String default_result_format, Integer default_verbose)return (Matrix[Double] X, String solver, String optim_method, Integer max_func_invoc, Integer include_mean, Integer p, Integer d, Integer q, Integer P, Integer D, Integer Q, Integer s, String dest, String result_format){
	#input col of time series data
	X = read($X)
	solver = ifdef($solver, default_solver)	
	optim_method = ifdef($optim_method, default_optim_method)
	max_func_invoc = ifdef($max_func_invoc, default_max_func_invoc)
	include_mean = ifdef($include_mean, default_include_mean)
	dest = ifdef($dest, default_dest)
	result_format = ifdef($result_format, default_result_format)
	
	#non-seasonal order
	p =	ifdef($p, default_p)
	d = ifdef($d, default_d)
	q = ifdef($q, default_q)

	#seasonal order
	P = ifdef($P, default_P)
	D = ifdef($D, default_D)
	Q = ifdef($Q, default_Q)

	#length of the season
	s = ifdef($s, default_s)	
}

[X, solver, optim_method, max_func_invoc, include_mean, p, d, q, P, D, Q, s, dest, result_format] = readParamters ("jacobi", "bfgs", 1000, FALSE, 0,0,0,0,0,0,1, "arima-results.csv", "csv", TRUE)

debug ("p= " + p)
debug ("d= " + d)
debug ("q= " + q)
debug ("P= " + P)
debug ("D= " + D)
debug ("Q= " + Q)
debug ("s= " + s)
debug ("include_mean= " + include_mean)
debug ("solver= " + solver)
debug ("optim_method= " + optim_method)
debug ("dest= " + dest)
debug ("result_format= " + result_format)

#p+P cols for ar & sar 
#q+Q cols for ma & sma 
#p*P cols as tmp parameter when combining season and non seasonal AR
#TODO: better var name  - is this var necessary 
totparamcols = p+P+Q+q+p*P 
debug ("totparamcols=" + totparamcols)

#TODO: check max_func_invoc < totparamcols --> print warning (stop here ??)

num_rows = nrow(X)
debug("nrows of X: " + num_rows)

if(num_rows <= d){
	warning("non-seasonal differencing order should be smaller than length of the time-series")
}
if(num_rows <= s*D){
	warning("seasonal differencing order should be smaller than number of observations divided by length of season")
}

mu = 0.0
if(include_mean == 1){
	mu = mean(X)
	X = X - mu
}

# d-th order differencing:
for(i in seq(1,d,1)){
	X = X[2:nrow(X),] - X[1:nrow(X)-1,]
}

for(i in seq(1,D,1)){
	n1 = nrow(X)+0.0
	X = X[s+1:n1,] - X[1:n1-s,]
}

#Matrix Z with target values of prediction (X) in first column and 
#all values that can be used to predict a this target value in column 2:totparamcols+1 of same row
#We only want rows of X to be in this matrix if we can fill all parameter columns as well:
#nrow(X) - ( p or Q or P*s or Q*s) >= 0 

max_timesteps_back = max(p, P*s, p+(P*s))

#first column is the target column (values to be predicted)
Z = cbind (X[max_timesteps_back+1:nrow(X),], matrix(0, nrow(X)-max_timesteps_back, totparamcols))

addShiftedMatrix = function (Matrix[Double] targetMatrix, Matrix[Double] sourceMatrix, Integer nShift, Integer column) return (Matrix[Double] targetMatrix){
	targetMatrix[1:nrow(targetMatrix), column] = sourceMatrix[nShift+1:nrow(targetMatrix)+nShift, 1]
}
	
# fills Z with values used for non seasonal AR prediction
for	(i in seq(1, p, 1)){
	Z = addShiftedMatrix(Z, X, max_timesteps_back -i, i +1)
}

#prediction values for seasonal AR 
for(i in seq(1, P, 1)){
	Z = addShiftedMatrix(Z, X, max_timesteps_back - (i * s), p + i + 1)
}

#prediction values for non seasonal MA 
for(i in seq(1, q, 1), check=0){
	Z = addShiftedMatrix(Z, X, max_timesteps_back - i, p + P + i + 1)
}

#prediction values for seasonal MA 
for(i in seq(1,Q, 1), check=0){
	Z = addShiftedMatrix(Z, X, max_timesteps_back - (i * s), p + P + q + i + 1)
}

#prediction values for combined models of non-seasonal and seasonal AR
counter = 1
for	(k in seq(1, p, 1)){
	for(j in seq(1, P, 1)){
		Z = addShiftedMatrix(Z, X, max_timesteps_back - k - (j*s), p + P + q + Q + counter + 1)
		counter+=1
	}
}
#for combination of non seasonal and seasonal AR the sign has to be inverted:
if (p>0&P>0) Z[,p+P+q+Q+2:ncol(Z)] = -Z[,p+P+q+Q+2:ncol(Z)]

#TODO: remove debug output
debug("\n" + toString( cbind (seq(1,nrow(Z)) + max_timesteps_back, Z)))


#TODO: More expressive Var name
#stop("here")
best_point = eval(optim_method + "_optimizer", Z, max_func_invoc, p, P, q, Q, s, solver)

if(include_mean){
	best_point = rbind(best_point, as.matrix(mu))
}

#TODO: Add R like output of result like this:
#########################################################################
# Coefficients:															#
#          ar1      ar2     ar3      ma1     ma2     ma3				#
#       1.1115  -0.1793  0.0660  -0.0679  0.1732  0.1251				#
# s.e.     NaN   0.2370  0.2183      NaN  0.1951  0.0302				#
#																		#
# sigma^2 estimated as 0.002628:  log likelihood = 1551.8,  aic = NA	#
#########################################################################

colNames = as.frame("")
for (i in seq(1, p, 1)){
	colNames = rbind(colNames, as.frame("ar"+i))
}
for (i in seq(1, P, 1)){
	colNames = rbind(colNames, as.frame("sar"+i))
}
for (i in seq(1, q, 1)){
	colNames = rbind(colNames, as.frame("ma"+i))
}
for (i in seq(1, Q, 1)){
	colNames = rbind(colNames, as.frame("sma"+i))
}

print("Coefficients for SARIMA("+p+", "+d+", "+q+")("+P+", "+D+", "+Q+") with seasonality s="+s+":\n" + toString(cbind(colNames[2:p+P+q+Q+1, ], as.frame(best_point)), decimal=6))

result_format = ifdef($result_format, "csv")
write(best_point, dest, format=result_format)

debug = function (String msg){
	verbosePrint("INFO: " + msg)
}

warning = function (String msg){
	verbosePrint("!WARNING!" + msg)
}

verbosePrint = function (String msg){
	verbose = ifdef($verbose, FALSE)
	if (verbose){
		print(msg)
	}
}