#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------


# 1. Inputs
n = 5; d = 6;

X = matrix(" 0.826062790211596  0.183227263001437    0.515246335524849  -0.532011376808821 -1.17421233145682 -1.06421341288933
             1.52697668673337  -1.02976754356662     0.261406324055383   1.68210359466318  -0.192239517539275   1.60345729812004
             0.466914435684700  0.949221831131023   -0.941485770955434  -0.875729346160017 -0.274070229932602   1.23467914689078
             -0.209713338388737 0.307061919146703   -0.162337672803828  -0.483815050110121  1.53007251442410   -0.229626450963181
             0.625190357087626  0.135174942099456   -0.146054634331526  -0.712004549027423 -0.249024742513714  -1.50615970397972 ", rows=5, cols=6)

# 2. initialize K, i.e, covariance matrix
#K= 1.0 * matrix(1, rows=n, cols=n) ;

K = -2 * X %*% t(X) + rowSums(X^2) %*% matrix(1, rows=1, cols=5) + matrix(1, rows=5, cols=1) %*% t( rowSums(X^2) )

/*
# 3. for each dimension
for( di in 1:6) {

  Xd = X[1:5,di] %*% matrix(1, rows=1, cols=6);

  diff = Xd - t(Xd)

  ls = 0.1

  val = exp(-(0.5/ls^2) * diff^2)

  K = K * val
}

tmp = cholesky(K)
# 5. print the values
for( i in 1:n) {
  for(j in 1:n) {
    print("("+ i +","+ j +")"+ " " + as.scalar( tmp[i,j] ) )
  }
}
*/

tmp = cholesky(K)

for( i in 1:n) {
  for(j in 1:n) {
    print("("+ i +","+ j +")"+ " " + as.scalar( tmp[i,j] ) )
  }
}
