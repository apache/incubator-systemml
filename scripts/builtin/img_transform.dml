#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

m_img_transform = function(Matrix[Double] img_in, Integer out_w, Integer out_h, Double a, Double b, Double c, Double d, Double e, Double f, Double fill_value) return (Matrix[Double] img_out) {
  # Applies an affine transformation to the input image.
  # The parameters a-f are the first two rows of the affine transformation matrix.
  divisor = a * e - b * d
  if(divisor == 0) {
    print("Inverse matrix does not exist! Returning input.")
    img_out = img_in
  }
  else {
    orig_w = ncol(img_in)
    orig_h = nrow(img_in)
    T_inv = matrix(0, rows=3, cols=3)
    T_inv[1, 1] = e / divisor
    T_inv[1, 2] = -b / divisor
    T_inv[1, 3] = (b * f - c * e) / divisor
    T_inv[2, 1] = -d / divisor
    T_inv[2, 2] = a / divisor
    T_inv[2, 3] = (c * d - a * f) / divisor
    T_inv[3, 3] = 1

    img_out = matrix(fill_value, rows=out_h, cols=out_w)
    for (x in 1:out_w) {
      for (y in 1:out_h) {
        m = matrix(1, rows=3, cols=1)
        m[1, 1] = x - 0.5
        m[2, 1] = y - 0.5
        coords = floor(T_inv %*% m) + 1
        src_x = as.scalar(coords[1, 1])
        src_y = as.scalar(coords[2, 1])
        if ((0 < src_x) & (src_x <= orig_w) & (0 < src_y) & (src_y <= orig_h)) {
          img_out[y, x] = img_in[src_y, src_x]
        }
      }
      m = matrix(1, rows=3, cols=out_h)
      m[1, 1:out_h] = x - 0.5
      m[2, 1:out_h] = seq(0.5, out_h - 0.5)
      coords = floor(T_inv %*% m) + 1

      #lower_bound = matrix(0, rows=2, cols=1)
      #upper_bound = matrix(0, rows=2, cols=1)
      #upper_bound[1, 1] = orig_w
      #upper_bound[2, 1] = orig_h
      #mask = (lower_bound < coords) & (coords <= upper_bound)
      #mask = mask[1,] & mask[2,]

      #ix = order(target=t(coords), by=seq(1, 2), index.return=TRUE)
      #coords2 = order(target=t(coords), by=seq(1, 2))
      #p = table(coords2[1,], coords2[2,])
      #image2 = matrix(p * img_in, rows=1, cols=orig_w*orig_h)
      #p2 = matrix(p, rows=1, cols=orig_w*orig_h)
      #data = removeEmpty(target=image2, margin="cols", select=p2)
      #img_out[1:out_h, x] = table(seq(1, orig_h), ix) %*% data
    }
  }
}
