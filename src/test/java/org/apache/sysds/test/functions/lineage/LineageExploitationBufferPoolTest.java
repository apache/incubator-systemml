package org.apache.sysds.test.functions.lineage;

import org.apache.sysds.hops.OptimizerUtils;
import org.apache.sysds.hops.recompile.Recompiler;
import org.apache.sysds.runtime.lineage.Lineage;
import org.apache.sysds.runtime.lineage.LineageCacheConfig;
import org.apache.sysds.runtime.lineage.LineageCacheEviction;
import org.apache.sysds.test.TestConfiguration;
import org.apache.sysds.test.TestUtils;
import org.junit.Test;
import org.junit.Assert;
import org.apache.sysds.runtime.controlprogram.caching.CacheStatistics;

import java.util.ArrayList;
import java.util.List;

public class LineageExploitationBufferPoolTest extends LineageBase
{
    protected static final String TEST_DIR = "functions/lineage/";
    protected static final String TEST_NAME1 = "LineageExploitationBufferPool1";
    protected String TEST_CLASS_DIR = TEST_DIR + LineageExploitationBufferPoolTest.class.getSimpleName() + "/";

    @Override
    public void setUp() {
        TestUtils.clearAssertionInformation();
        addTestConfiguration(TEST_NAME1, new TestConfiguration(TEST_CLASS_DIR, TEST_NAME1));
    }

    @Test
    public void testLineageReusePerf1() { testLineageExploitationBufferPool(TEST_NAME1); }

    public void testLineageExploitationBufferPool(String testname) {
        boolean old_simplification = OptimizerUtils.ALLOW_ALGEBRAIC_SIMPLIFICATION;
        boolean old_sum_product = OptimizerUtils.ALLOW_SUM_PRODUCT_REWRITES;

        try {

            LOG.debug("------------ BEGIN " + testname + "------------");

            /* Test description
             */

            OptimizerUtils.ALLOW_ALGEBRAIC_SIMPLIFICATION = false;
            OptimizerUtils.ALLOW_SUM_PRODUCT_REWRITES = false;

            getAndLoadTestConfiguration(testname);
            fullDMLScriptName = getScript();
            // System.out.println(LineageCacheEviction.getCacheLimit());

            // costnsize scheme (computationTime/Size)
            List<String> proArgs = new ArrayList<>();
            // proArgs.clear();
            proArgs.add("-stats");
            proArgs.add("-lineage");
            proArgs.add("-args");
            proArgs.add(output("Z"));
            programArgs = proArgs.toArray(new String[proArgs.size()]);
            Lineage.resetInternalState();

            runTest(true, EXCEPTION_NOT_EXPECTED, null, -1);

            /*
             * SystemDS Statistics:
             * Total compilation time:          0.239 sec.
             * Total execution time:            173.926 sec.
             * Number of compiled Spark inst:	0.
             * Number of executed Spark inst:	0.
             * Cache hits (Mem, WB, FS, HDFS):	10/0/0/0.
             * Cache writes (WB, FS, HDFS):     11/5/1.
             * Cache times (ACQr/m, RLS, EXP):	0.000/0.001/1.894/2.921 sec.
             * HOP DAGs recompiled (PRED, SB):	0/0.
             * HOP DAGs recompile time:	        0.000 sec.
             * Spark ctx create time (lazy):	0.000 sec.
             * Spark trans counts (par,bc,col): 0/0/0.
             * Spark trans times (par,bc,col):	0.000/0.000/0.000 secs.
             * Total JIT compile time:		    1.691 sec.
             * Total JVM GC count:		        9.
             * Total JVM GC time:		        0.104 sec.
             * Heavy hitter instructions:
             * #  Instruction  Time(s)  Count
             * 1  ba+*         168.744      5
             * 2  write          2.933      1
             * 3  rand           2.242      6
             * 4  createvar      0.004     11
             * 5  rmvar          0.001      6
            */

            Assert.assertEquals(6, CacheStatistics.getLinWrites());
            String[] writes = CacheStatistics.displayWrites().split("/");
            Assert.assertEquals(5, Long.parseLong(writes[0])); // writes WB
            Assert.assertEquals(6, Long.parseLong(writes[3])); // writes Lineage

        } finally {
            OptimizerUtils.ALLOW_ALGEBRAIC_SIMPLIFICATION = old_simplification;
            OptimizerUtils.ALLOW_SUM_PRODUCT_REWRITES = old_sum_product;
            Recompiler.reinitRecompiler();
        }

    }
}
