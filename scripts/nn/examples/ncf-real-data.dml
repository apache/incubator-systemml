#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

# Imports
source("staging/NCF.dml") as NCF
source("scripts/nn/examples/ncf-one-hot.dml") as ncf_util

# read input data
# items_train = read("scratch_space/tiny/items_one_hot_train.csv", format="csv", header=FALSE, sep=",");
# items_val = read("scratch_space/tiny/items_one_hot_test.csv", format="csv", header=FALSE, sep=",");

# users_train = read("scratch_space/tiny/users_one_hot_train.csv", format="csv", header=FALSE, sep=",");
# users_val = read("scratch_space/tiny/users_one_hot_test.csv", format="csv", header=FALSE, sep=",");

# targets_train = read("scratch_space/tiny/targets_train.csv", format="csv", header=FALSE, sep=",");
# targets_val = read("scratch_space/tiny/targets_test.csv", format="csv", header=FALSE, sep=",");

# user/items integer-encoded vectors
items_train_int_encoded = read("scratch_space/small/items_train.csv", format="csv", header=FALSE, sep=",");
users_train_int_encoded = read("scratch_space/small/users_train.csv", format="csv", header=FALSE, sep=",");

items_val_int_encoded = read("scratch_space/small/items_test.csv", format="csv", header=FALSE, sep=",");
users_val_int_encoded = read("scratch_space/small/users_test.csv", format="csv", header=FALSE, sep=",");

targets_train = read("scratch_space/small/targets_train.csv", format="csv", header=FALSE, sep=",");
targets_val = read("scratch_space/small/targets_test.csv", format="csv", header=FALSE, sep=",");

N = max(max(items_train_int_encoded), max(items_val_int_encoded)); # number items
M = max(max(users_train_int_encoded), max(users_val_int_encoded)); # number users

print("Done reading.");

# user/items matrices by applying one-hot-encoding
items_train = ncf_util::to_one_hot(items_train_int_encoded, N);
items_val = ncf_util::to_one_hot(items_val_int_encoded, N);
users_train = ncf_util::to_one_hot(users_train_int_encoded, M);
users_val = ncf_util::to_one_hot(users_val_int_encoded, M);

print("Done encoding.");

# Train
[biases, weights] = NCF::train(users_train, items_train, targets_train, users_val, items_val, targets_val);

b1 = as.matrix(biases[1]);

print(toString(b1));