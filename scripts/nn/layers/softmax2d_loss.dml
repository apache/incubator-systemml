#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

/*
 * This layer implements the functionality of Caffe's SoftmaxWithLossLayer for 2d-examples.
 *
 * Typical usage:
 * # Begin Forward Pass
 * prevOut = prevLayer::forward(...)
 * probs = softmax2d_loss::forward(prevOut)
 *
 * # Begin Backward Pass
 * prevDOut = softmax2d_loss::backward(prevOut, probs, yb)
 * ... = prevLayer::backward(prevDOut, ...)
 *
 * #  Compute training loss & accuracy
 * [loss, accuracy] = softmax2d_loss::compute_loss_accuracy(probs, y)
 */
 
 source("nn/layers/softmax2d.dml") as softmax2d
 
 forward = function(matrix[double] scores, int C)
    return (matrix[double] probs) {
  /*
   * Computes the forward pass for a softmax2d classifier.  The input
   * has four dimensions (N, C, Hin, Win), that means it has N
   * 2d-examples with a shape (Hin, Win), each pixel in the 2d
   * example has C values that are interpreted as unnormalized,
   * log-probabilities for each of C classes.  The softmax function
   * transforms these values to normalized probabilities across the C
   * classes, for every example.
   *
   * This can be interpreted as a generalization of the sigmoid
   * function to multiple classes.
   *
   *   `probs_ijk = e^scores_ijk / sum(e^scores_ijk)`
   *
   * In these equations, `probs_ijk` is the C-dimensional vector of the
   * normalized probabilities for the pixel `j, k` in the example `i`
   *
   * Inputs:
   *  - scores: Inputs, of shape (N, C*Hin*Win).
   *  - C: Number of input channels (dimensionality of input depth).
   *
   * Outputs:
   *  - probs: Outputs, of shape (N, C*Hin*Win).
   */
   probs = softmax2d::forward(scores, C)
}
 
 backward = function(matrix[double] scores, matrix[double] probs, matrix[double] y)
    return (matrix[double] dscores) {
  stop('Not implemented')
  dscores = scores
 }
 
 compute_loss_accuracy = function(matrix[double] probs, matrix[double] y)
    return (double loss, double accuracy) {
  stop('Not implemented')
  loss = 0; accuracy = 0
 }
 