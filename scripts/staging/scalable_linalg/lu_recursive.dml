#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------


LU = function(Matrix[double] A, int nb)
  return(Matrix[double] P, Matrix[double] L, Matrix[double] U) {
    n = ncol(A)
    if (n <= nb) {
      [P, L, U] = lu(A)
    } else {
      k = as.integer(floor(n/2))
      A11 = A[1:k,1:k]
      A12 = A[1:k,k+1:n]
      A21 = A[k+1:n,1:k]
      A22 = A[k+1:n,k+1:n]

      [P11, L11, U11] = LU(A11, nb)
      L11inv = L_triangular_inv(L11)
      U11inv = U_triangular_inv(U11)
      U12 = L11inv %*% (P11 %*% A12)
      A22 = A22 - A21 %*% U11inv %*% U12
      [P22, L22, U22] = LU(A22, nb)
      L21 = P22 %*% A21 %*% U11inv

      Z12 = matrix(0, rows=nrow(A11), cols=ncol(A22))
      Z21 = matrix(0, rows=nrow(A22), cols=ncol(A11))

      L1 = cbind(L11, Z12)
      L2 = cbind(L21, L22)
      L = rbind(L1, L2)
      U1 = cbind(U11, U12)
      U2 = cbind(Z21, U22)
      U = rbind(U1, U2)
      P1 = cbind(P11, Z12)
      P2 = cbind(Z21, P22)
      P = rbind(P1, P2)
    }
}
