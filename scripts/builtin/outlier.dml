#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------
#An outlier in a probability distribution function is a number that is more 
#than 1.5 times the length of the data set away from either the lower or upper quartiles.
#Specifically, if a number is less than Q1−1.5×IQR or greater than Q3+1.5×IQR, then it is an outlier.
#
 # USAGE
#-------------------------------------------------------------
# outlier(Matrix[Double], boolean value)

# INPUT PARAMETERS
#-------------------------------------------------------------
# NAME                    TYPE	  DEFAULT     MEANING
#-------------------------------------------------------------
# X			          Double      ---             The input matrix to do outlier on.
# opposite		  Boolean    ---	     comparison value for xor function
#
# RETURN VALUES
# ----------------------------------------------------------------------------
# NAME     TYPE      DEFAULT  MEANING
# ----------------------------------------------------------------------------
# Y           Double      "Y.mtx"    The output matrix of outlier function  


m_outlier = function(Matrix[Double] X, Boolean opposite) return (Matrix[Double] Y) {
  # determine if largest value has largest diff from mean
	I = (colMaxs(X)-colMeans(X)) > (colMeans(X)-colMins(X));
  # opposite: if largest value has largest diff from the mean, it gives smallest and vice versa
	Y = ifelse(xor(I,opposite), colMaxs(X), colMins(X));
}
