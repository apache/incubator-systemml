
# variables
full_path_d = "/home/d/Desktop/TU-UNI/8.SEMESTER/AMLS/systemds/"
full_path_p = "/home/arch/Desktop/Studium/Master/2_Semester/AMLS/systemds/"



print("[DEBUG] starting script calling xgboost")
X = read("./ownscripts/cat_X.csv", format="csv");
y = read("./ownscripts/cat_y.csv", format="csv");
R = read("./ownscripts/cat_R.csv", format="csv");


#printMatrix(X, "training set")
#printMatrix(Y, "testing set")
print("[DEBUG] calling xgboost")
M = xgboost(X = X, y = y, R = R);


print("[DEBUG] calling xgboostPredict")
#y_predict = xgboostPredict(X, M)

print("[DEBUG] finish script")


printMatrix = function(Matrix[Double] m, string name) return() {
    print("--------------------------------------")
    print(":: [MATRIX] " + name + "  (col:" + ncol(m) + ",row:" + nrow(m) + ")")

    col_string = ":::::::"
    for(col in 1:ncol(m)) {
        col_string = col_string + ":::(" + toString(col) + ")::::"
    }
    print(col_string)
    for(row in 1:nrow(m)) {

        print_string = ":(" + row + ")     "
        for(col in 1:ncol(m)) {
            curr_value = m[row,col]
            if(as.scalar(curr_value) < 9)
                print_string = print_string + toString(curr_value, linesep="     ", sep=",")
            else if(as.scalar(curr_value) < 99)
                print_string = print_string + toString(curr_value, linesep="    ", sep=",")
            else if(as.scalar(curr_value) < 999)
                print_string = print_string + toString(curr_value, linesep="   ", sep=",")
            else if(as.scalar(curr_value) < 9999)
                print_string = print_string + toString(curr_value, linesep="  ", sep=",")
            else
                print_string = print_string + toString(curr_value, linesep=" ", sep=",")
        }
        print(print_string)
    }
    print("--------------------------------------")
}