#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

# ----------------------------------------------------
# Modal selection for Gaussian Process Regression
# ----------------------------------------------------


gpr = function (matrix[double] X, matrix[double] y, matrix[double] K, double noise_level)
  return (matrix[double] f_pred_mean, matrix[double] f_pred_variance, matrix[double] lmlh) {

  /*
   * INPUT:
   * - X : inputs,
   * - y : targets,
   * - K : covariance function
   * - noise_level : of likelihood function
   *
   * OUTPUT:
   * - fmean : mean of f*
   * - variance : variance of f*
   * - lmlh : log marginal likelihood
   *
   */

   # 2. L = cholesky(K + σ * I)
   L = cholesky(K + noise_level * I)

   # 3. α = t(L) \  (L\y)
   alpha = solve( t(L), solve(L, y) )

   # 4. mean(f*) = t(K*) α
   f_pred_mean = t(K_star) %*% alpha

   # 5. v = L \ K*
   v = solve(L, K_star)

   # 6. V[f*] = K(x*, x*) - t(v) v
   f_pred_variance = K - t(v) %*% v

   # 7. log p(y|X) = - 0.5 t(y) α - Σ diag (L) - (n/2) log2π
   # n is the shape of K
   lmlh = - 0.5 * t(y) %*% alpha - sum( diag(L) ) - (n/2) * log(2 * pi)

}
