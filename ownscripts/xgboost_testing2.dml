
# variables
full_path_d = "/home/d/Desktop/TU-UNI/8.SEMESTER/AMLS/systemds/"
full_path_p = "/home/arch/Desktop/Studium/Master/2_Semester/AMLS/systemds/"

file_to_test = "./ownscripts/tests/test2"



print("[DEBUG] starting script calling xgboost")
X = read(file_to_test + "_X.csv", format="csv");
y = read(file_to_test + "_y.csv", format="csv");
R = read(file_to_test + "_R.csv", format="csv");

#printMatrix(X, "training set")
#printMatrix(Y, "testing set")
print("[DEBUG] calling xgboost")

X_onehot = toOneHot(X[,1],2)
X = cbind(X_onehot, X[,2])
printMatrix(X, "x one hot")
M = xgboost(X = X, y = y, R = R);



print("[DEBUG] calling xgboostPredict")
#y_predict = xgboostPredict(X, M)

print("[DEBUG] finish script")


printMatrix = function(Matrix[Double] m, string name) return() {
    print("--------------------------------------")
    print(":: [MATRIX] " + name + "  (col:" + ncol(m) + ",row:" + nrow(m) + ")")

    if(nrow(m) != 0 & ncol(m) != 0)
    {
        col_string = ":::::::"
        for(col in 1:ncol(m)) {
            if(col < 10)
                col_string = col_string + ":::(" + toString(col) + ")::::"
            else
                col_string = col_string + ":::(" + toString(col) + "):::"
        }
        print(col_string)
        for(row in 1:nrow(m)) {

            print_string = ":(" + row + ")     "
            for(col in 1:ncol(m)) {
                curr_value = m[row,col]
                if(as.scalar(curr_value) < 10)
                    print_string = print_string + toString(curr_value, linesep="     ", sep=",")
                else if(as.scalar(curr_value) < 100)
                    print_string = print_string + toString(curr_value, linesep="    ", sep=",")
                else if(as.scalar(curr_value) < 1000)
                    print_string = print_string + toString(curr_value, linesep="   ", sep=",")
                else if(as.scalar(curr_value) < 10000)
                    print_string = print_string + toString(curr_value, linesep="  ", sep=",")
                else
                    print_string = print_string + toString(curr_value, linesep=" ", sep=",")
            }
            print(print_string)
        }
    }
    print("--------------------------------------")
}