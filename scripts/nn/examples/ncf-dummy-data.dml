#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

# Imports
source("staging/NCF.dml") as NCF

K_train = 1000; # number of samples
K_val = 300;

N = 1000; # number items
M = 50; # number users

# targets
targets_train = round(rand(rows=K_train, cols=1));
targets_val = round(rand(rows=K_val, cols=1));

# user/items integer-encoded vectors
items_train_int_encoded = round(rand(rows=K_train, cols=1, min=1, max=N));
users_train_int_encoded = round(rand(rows=K_train, cols=1, min=1, max=M));
items_val_int_encoded = round(rand(rows=K_val, cols=1, min=1, max=N));
users_val_int_encoded = round(rand(rows=K_val, cols=1, min=1, max=M));

# user/items matrices by applying one-hot-encoding
js_dummy_code_spec = "{ids:true, dummycode:[1]}";
[items_train, y] = transformencode(target=as.frame(items_train_int_encoded), spec=js_dummy_code_spec);
[users_train, y] = transformencode(target=as.frame(users_train_int_encoded), spec=js_dummy_code_spec);
[items_val, y] = transformencode(target=as.frame(items_val_int_encoded), spec=js_dummy_code_spec);
[users_val, y] = transformencode(target=as.frame(users_val_int_encoded), spec=js_dummy_code_spec);

# Train
[biases, weights] = NCF::train(users_train, items_train, targets_train, users_val, items_val, targets_val);

b1 = as.matrix(biases[1]);

print(toString(b1));

# Write model out
#write(w0, out_dir+"/w0");
#write(W, out_dir+"/W");
#write(V, out_dir+"/V");

# Evaluate
# probs = NCF::predict(X, w0, W, V);
# [loss, accuracy] = NCF::eval(probs, y);

# Output results
# print("Test Accuracy: " + accuracy)
#write(accuracy, out_dir+"/accuracy")

print("done ncf-ing.")
