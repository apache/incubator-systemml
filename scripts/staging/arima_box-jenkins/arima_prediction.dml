#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------
# Arguments
# Required:
# 'X': path to file containing X (one column time series - there has to be an .mtd file associated to the src file!) 
# 'weights': (overwrites weights_src arg!) initialization string for weight matrix, see DML language documentation for matrix constructor using initialization string
# 'weights_src': path to weights file / arima model generated by arima training script
# Optional:
# 'n': the number of timesteps to forcast using the given weights(default 1)
# 'p': p (non-seasonal AR order) (default 0)
# 'd': d (non-seasonal differencing order) (default 0)
# 'q': q (non-seasonal MA order) (default 0)
# 'P': P (seasonal AR order) (default 0)
# 'D': D (seasonal differencing order)(default 0)
# 'Q': Q (seasonal MA order)(default 0)
# 's': s (period in terms of number of time-steps) (default 1)
# 'solver': must be either 'cg' for conjugate gradients method or 'jacobi' for jacobi method (default "jacobi")
# 'dest': file name to store predictions (default "predictions.csv")
# 'result_format': the format of the destination file (default "csv") 


source("solver_sys_lin_equations.dml") as numerical_solvers
source("arima_training.dml") as arima_utils

predict = function(Matrix[Double] weights, Matrix[Double] Z, Integer p, Integer P, Integer q, Integer Q, Integer s, String solver) return (Matrix[Double] approximated_solution, Matrix[Double] combined_weights){
	
	combined_weights = weights
	if (p>0 & P>0){
		combined_weights = rbind(combined_weights, matrix(weights[1:p,] %*% t(weights[p+1:p+P,]), rows=p*P, cols=1))
	}
	if (q>0 & Q>0){
		combined_weights = rbind(combined_weights, matrix(weights[p+P+1:p+P+q,] %*% t(weights[p+P+q+1:p+P+q+Q,]), rows=q*Q, cols=1))
	}
	
	b = Z%*%combined_weights
	R = matrix(0, nrow(Z), nrow(Z))
	for(i in seq(1, q, 1)){
		d_ns = matrix(as.scalar(weights[P+p+i,1]), nrow(R)-i, 1)
		R[1+i:nrow(R),1:ncol(R)-i] = R[1+i:nrow(R),1:ncol(R)-i] + diag(d_ns)
	}
	
	for(i in seq(1, Q, 1)){
		err_ind_s = s*i
		d_s = matrix(as.scalar(weights[P+p+q+i,1]), nrow(R)-err_ind_s, 1)
		R[1+err_ind_s:nrow(R),1:ncol(R)-err_ind_s] = R[1+err_ind_s:nrow(R),1:ncol(R)-err_ind_s] + diag(d_s)
	} 	
	
	#TODO for SMA: add combined_weights to R the same way as q and Q weights
	
	#TODO: Use eval function as soon as it supports calling functions outside the default namespace
	if (solver == "jacobi"){
		approximated_solution = numerical_solvers::jacobi (R=R, b=b)
	}
	else if (solver == "cg"){
		approximated_solution = numerical_solvers::cg (R=R, b=b)
	}
}


#input time series data
X = read($X)

n = ifdef($n, 10)
solver = ifdef($solver, "jacobi")	
optim_method = ifdef($optim_method, "bfgs")
max_func_invoc = ifdef($max_func_invoc, 1000)
dest = ifdef($dest, "predictions.csv")
result_format = ifdef($result_format, "csv")


#non-seasonal order
p =	ifdef($p, 0)
d = ifdef($d, 0)
q = ifdef($q, 0)

#seasonal order
P = ifdef($P, 0)
D = ifdef($D, 0)
Q = ifdef($Q, 0)

#length of the season
s = ifdef($s, 1)	

#weights
init_string = ifdef($weights, "empty")
if (init_string != "empty"){
	weights = matrix (init_string, p+P+q+Q, 1)
}
else{
	weights_src = ifdef ($weights_src, "arima-result.csv")
	weights = read(weights_src)
}

X = arima_utils::difference (X, d, D, s)

#R does not use the first rows of Z where the values in columns for p or P are zero, so we cut of all those first rows
max_ar_lag = max(p, P*s, p+(P*s))
Z = arima_utils::constructPredictorMatrix(rbind(X, matrix(0,1,1)), p, P, q, Q, s)
prediction = predict(weights, Z[max_ar_lag:nrow(Z),], p, P, q, Q, s, solver)
for (i in seq(2, n, 1)){
	Z = arima_utils::constructPredictorMatrix(rbind(X, rbind(prediction, matrix(0,1,1))), p, P, q, Q, s)
	prediction = predict(weights, Z[max_ar_lag:nrow(Z),], p, P, q, Q, s, solver)
	prediction = prediction[nrow(X):nrow(X)+i,]
}
print("Predictions (Timestep|Predicted Value): \n" + toString(cbind(seq(nrow(X), nrow(X)+n, 1), prediction)))
write(prediction, dest, format=result_format)