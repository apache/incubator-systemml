#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------
source("scripts/builtin/sherlockNet.dml") as sherlockNet

m_sherlockPredict = function(matrix[double] X,
            matrix[double] cW1, matrix[double] cb1,
            matrix[double] cW2, matrix[double] cb2,
            matrix[double] cW3, matrix[double] cb3,
            matrix[double] wW1, matrix[double] wb1,
            matrix[double] wW2, matrix[double] wb2,
            matrix[double] wW3, matrix[double] wb3,
            matrix[double] pW1, matrix[double] pb1,
            matrix[double] pW2, matrix[double] pb2,
            matrix[double] pW3, matrix[double] pb3,
            matrix[double] fW1, matrix[double] fb1,
            matrix[double] fW2, matrix[double] fb2,
            matrix[double] fW3, matrix[double] fb3)
      return (matrix[double] probs) {

  rows = nrow(X)

  cprobs = sherlockNet::predict(X[1:rows, 224:1183], cW1, cb1, cW2, cb2, cW3, cb3)
  wprobs = sherlockNet::predict(cbind(X[1:rows, 13:212], X[1:rows, 1188]), wW1,wb1, wW2, wb2, wW3, wb3)
  pprobs = sherlockNet::predict(X[1:rows, 1189:1588], pW1, pb1, pW2, pb2, pW3, pb3)

  first_predictions = cbind(cprobs, wprobs, pprobs)
  #final training
  probs = sherlockNet::predict(first_predictions, fW1, fb1, fW2, fb2, fW3, fb3)
}

eval = function(matrix[double] probs, matrix[double] Y)
  return (double loss, double accuracy) {
  /*
  * Evaluates the performance of the network.
  *
  * The probs matrix contains the class probability predictions
  * of K classes over N examples. The targets, Y, have K classes,
  * and are one-hot encoded.
  *
  * Inputs:
  *  -probs: Class probabilities, of shape(N, K).
  *  - Y: Target matrix, of shape (N, K).
  *
  * Outputs:
  *  - loss: Scalar loss, of shape (1).
  *  - accuracy: Scalar accuracy, of shape(1).
  */
  [loss, accuracy] = sherlockNet::eval(probs, Y)
}