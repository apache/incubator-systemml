#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------
# Implements the (2-way) factorization machines.
#
# ------------------------------------------------------------------------------------------------------
# NAME      TYPE     DEFAULT  MEANING
# ------------------------------------------------------------------------------------------------------
# X         String   ---      Location to read the input matrix X to be factorized
# y         String   ---      Location to read the input matrix y corresponding to the feature vector
# k         Int      ---      hyperparameter that defines the dimensionality of factorization
# -------------------------------------------------------------------------------------------------------
#
# OUTPUT: Updated Parameters w0, W, V, in matrix form. 
# 

fileX = $X; # nxm : n rows and m columns
fileY = $y; # nx1

X = read (fileX);
y = read (fileY);

w0 = matrix(0, rows=1, cols=1); # 1x1
W  = matrix(0, rows=1, cols=n); # 1xn
V  = rand(rows=n, cols=k, min=0.0, max=1.0); # nxk

# model equation 
# Y = w0 + sum(W * X) + 0.5 * sum( ( X %*% t(V) ) - ( (X) ^ 2 ) %*% t( V ^ 2));

# gradient vector wrt to w0, W, V 
g_w0 = as.matrix(1);
g_W  = colSums(X != 0);
g_V  = (colSums(t(V) %*% X) * colSums(X != 0)) - colSums(t(V) %*% (X * X));

# ----------------------------------------------------------------------------------------------------------------
# adam model | Jimmy Lei Ba & Diederik P. Kingma | see for more details: (arXiv:1412.6980v9 [cs.LG] 30 Jan 2017) | 
# ----------------------------------------------------------------------------------------------------------------

# Imports
source("nn/optim/adam.dml") as adam

# Default values for some parameters
lr      = 0.001; 
beta1   = 0.9;       # [0, 1)
beta2   = 0.999;     # [0, 1)
epsilon = 0.00000001; 
t       = 0;

# initialize 
[m_w0, v_w0] = adam::init(w0);
[m_W, v_W] = adam::init(W);
[m_V, v_V] = adam::init(V);

# convergence criteria
converged = false;

while (!converged) {

  [w0, m_w0, v_w0] = adam::update(w0, g_w0, lr, beta1, beta2, epsilon, t, m_w0, v_w0);
  [W, m_W, v_W] = adam::update(W, g_W, lr, beta1, beta2, epsilon, t, m_W, v_W);
  [V, m_V, v_V] = adam::update(V, g_V, lr, beta1, beta2, epsilon, t, m_V, v_V);
  
}