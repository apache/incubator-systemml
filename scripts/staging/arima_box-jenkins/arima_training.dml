#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------
# Arguments
# 'X': X (one column time series - there has to be an .mtd file associated to the src file!) 
# 'max_func_invoc': max_func_invoc (default 1000)
# 'p': p (non-seasonal AR order) (default 0)
# 'd': d (non-seasonal differencing order) (default 0)
# 'q': q (non-seasonal MA order) (default 0)
# 'P': P (seasonal AR order) (default 0)
# 'D': D (seasonal differencing order)(default 0)
# 'Q': Q (seasonal MA order)(default 0)
# 's': s (period in terms of number of time-steps) (default 1)
# 'include_mean': TRUE/FALSE (default FALSE)
# 'solver': must be either 'cg' for conjugate gradients method or 'jacobi' for jacobi method (default "jacobi")
# 'optim_method': must be either "neldermead" or "bfgs" (default "bfgs")
# 'dest': file name to store learnt parameters (default "arima-result.csv")
# 'result_format': the format of the destination file (default "csv") 

source("arima_prediction.dml") as arima_prediction

#This function is used to calculate the error that occures when predicting using the given weights
arima_residuals = function(Matrix[Double] weights, Matrix[Double] X, Matrix[Double] Z, Integer p, Integer P, Integer q, Integer Q, Integer s, String solver) return (Matrix[Double] errs, Matrix[Double] combined_weights){
	[approximated_solution, combined_weights] = arima_prediction::predict(weights, Z, p, P, q, Q, s, solver)
	errs = X - approximated_solution
}

#Calculates the condition sum of square of residuals-> this is one of the possible functions to optimize over to solve ARIMA
arima_css = function(Matrix[Double] weights, Matrix[Double] X, Matrix[Double] Z, Integer p, Integer P, Integer q, Integer Q, Integer s, String solver) return (Double obj, Matrix[Double] errs){
	[errs, combined_weights] = arima_residuals(weights, X, Z, p, P, q, Q, s, solver)
	obj = 0.5 * sum(errs^2)
}

#This optimization method gives the same results as R's build-in arima for small p, but as p is increased the accuaracy when comparing to R's arima decreases
#TODO: Fix this ^^
neldermead_optimizer = function (Matrix[Double] X, Matrix[Double] Z, Integer max_iterations, Integer p, Integer P, Integer q, Integer Q, Integer s, String solver)return(Matrix[Double] arima_model){
	nParam = p+P+q+Q
	simplex = cbind(matrix(0, nParam, 1), diag(matrix(0.1, nParam, 1)))
	objvals = matrix(0, 1, ncol(simplex))

	for(i in seq(1,ncol(simplex))){
		objvals[1,i] = arima_css(simplex[,i], X, Z, p, P, q, Q, s, solver)
	}

	#TODO: make this an optional parameter
	tol = 1.5 * 10^(-8) * as.scalar(objvals[1,1])

	num_func_invoc = ncol(simplex)
	
	continue = TRUE
	while(continue & num_func_invoc <= max_iterations){
		best_index = as.scalar(rowIndexMin(objvals))
		worst_index = as.scalar(rowIndexMax(objvals))
		
		best_obj_val = as.scalar(objvals[1,best_index])
		worst_obj_val = as.scalar(objvals[1,worst_index])
		
		continue = (worst_obj_val > best_obj_val + tol)

		debug("#Function calls::" + num_func_invoc + " OBJ: " + best_obj_val)
		
		c = (rowSums(simplex) - simplex[,worst_index])/(nrow(simplex))
		
		x_r = 2*c - simplex[,worst_index]
		obj_x_r = arima_css(x_r, X, Z, p, P, q, Q, s, solver)
		num_func_invoc += 1
		
		if(obj_x_r < best_obj_val){
			x_e = 2*x_r - c
			obj_x_e = arima_css(x_e, X, Z, p, P, q, Q, s, solver)
			num_func_invoc = num_func_invoc + 1
			
			simplex[,worst_index] = ifelse (obj_x_r <= obj_x_e, x_r, x_e)
			objvals[1,worst_index] = ifelse (obj_x_r <= obj_x_e, obj_x_r, obj_x_e)
		}else{
			if(obj_x_r < worst_obj_val){
				simplex[,worst_index] = x_r
				objvals[1,worst_index] = obj_x_r
			}
			
			x_c_in = (simplex[,worst_index] + c)/2
			obj_x_c_in = arima_css(x_c_in, X, Z, p, P, q, Q, s, solver)
			num_func_invoc += 1
			
			if(obj_x_c_in < as.scalar(objvals[1,worst_index])){
				simplex[,worst_index] = x_c_in
				objvals[1,worst_index] = obj_x_c_in
			}else{
				if(obj_x_r >= worst_obj_val){
					arima_model = simplex[,best_index]
					for(i in 1:ncol(simplex)){
						if(i != best_index){
							simplex[,i] = (simplex[,i] + arima_model)/2
							objvals[1,i] = arima_css(simplex[,i], X, Z, p, P, q, Q, s, solver)
						}
					}
					num_func_invoc += ncol(simplex) - 1
				}
			}
		}
	}
	
	debug("final simplex:\n" + toString(simplex) + "\n with best index at " + best_index)
	arima_model = simplex[,best_index]
}
 
#Calculates the gradient of ARIMA_CSS (Condition Sum of Squares of Residuals)
#not working for q > 0 or Q > 0 -> gradFinitDifference(...) retuns differnt values 
gradArimaCSS = function(Matrix[Double] weights, Matrix[Double] X, Matrix[Double] Z, Integer p, Integer P, Integer q, Integer Q, Integer s, String solver) return(Matrix[double] grad){
	[residuals, combined_weights] = arima_residuals(weights, X, Z, p, P, q, Q, s, solver)
	
	#to calculate the gradient of MA we need to built another Matrix like Z, but containing the residuals instead of the time series X
	b = matrix(0, nrow(residuals), q+Q)
	for (i in seq(1,q,1)){
		b = addShiftedMatrix(b, residuals, i, i)
	}
	
	for (i in seq(1,Q,1)){
		b = addShiftedMatrix(b, residuals, i * s, q+i)
	}
	
	res_ma = t(-b) %*% residuals
	res_ar = t(-Z) %*% residuals
		
	grad = matrix(0, rows=p+P+q+Q, cols=1)
	if (p > 0) grad[1:p,] = res_ar[1:p,]
	if (P > 0) grad[p+1:p+P,] = res_ar[p+1:p+P,]
	if (q > 0) grad[p+P+1:p+P+q] = res_ma[1:q,]
	if (Q > 0) grad[p+P+q+1:p+P+q+Q] = res_ma[q+1:q+Q,]
	if (p>0 & P>0){		
		for(i in seq(1, p, 1)){
			permut = matrix(0, rows=p, cols=P)
			permut[i,] = t(combined_weights[p+1:p+P,])
			grad[i,1] = grad[i,1] + sum(res_ar[p+P+1:p+P+p*P,] * matrix(permut, rows=p*P, cols=1))
		}

		for(i in seq(1, P, 1)){
			permut = matrix(0, rows=p, cols=P)
			permut[,i] = combined_weights[1:p,]
			grad[p+i,1] = grad[p+i,1] + sum(res_ar[p+P+1:p+P+p*P,] * matrix(permut, rows=p*P, cols=1))
		}
		
	}
}

# L2 norm of descent direction at x
L2norm = function (Matrix[Double] fx)return(Double norm){
	norm = (sum(fx^2))^0.5 
}

#Bactracking Line Search
linesearch = function (Matrix[Double] searchDirection, Double fx,  Matrix[Double] weights, Matrix[Double] X, Matrix[Double] Z, Integer p, Integer P, Integer q, Integer Q, Integer s, String solver)return(Matrix[Double] new_weights, Double fxnew, Double ak){
	#TODO: What are the best starting paramters?
	alpha = 0.0001
	r = 0.9
	
	#stepsize
	ak = 1.0
	
	new_weights = weights + ak*searchDirection
	fxnew = arima_css(new_weights, X, Z, p, P, q, Q, s, solver)	
	
	while(fxnew > fx + alpha*ak*as.scalar(t(searchDirection)%*%searchDirection)){ 
		ak = r*ak
		new_weights = weights + ak*searchDirection
		fxnew = arima_css(new_weights, X, Z, p, P, q, Q, s, solver)
	}
}

#Quasi Newton Optimizer: Broyden–Fletcher–Goldfarb–Shanno 
bfgs_optimizer = function (Matrix[Double] X, Matrix[Double] Z, Integer max_iterations, Integer p, Integer P, Integer q, Integer Q, Integer s, String solver)return(Matrix[Double] weights){
	nParam = p+P+q+Q
	
	#'first guess' weights should not be intitialized with 0, otherwise the norm of gx will equal 0 and the loop will not run
	weights = matrix(0.5, nParam, 1)
	fx = arima_css(weights, X, Z, p, P, q, Q, s, solver)
	gx = gradArimaCSS(weights, X, Z, p, P, q, Q, s, solver)
	norm_gx = L2norm(gx)
	
	#The approximated inverse hessian 
	B = diag(matrix(1.0, nParam,1)) 
	
	debug("bfgs_optimizer sum gx^2 " + sum(gx ^2))
	debug("bfgs_optimizer arima_css initial " + fx)
	
	iter = 0
	tol = 1.5 * 10^(-8)
	diff = tol +1
	while(norm_gx > tol & iter < max_iterations & diff > tol){
		debug("bfgs_optimizer iterations " + iter)
		
		#1. + 2. step
		[new_weights, fxnew, stepsize] = linesearch ((-B%*%gx), fx, weights, X, Z, p, P, q, Q, s, solver)
		gxnew = gradArimaCSS(new_weights, X, Z, p, P, q, Q, s, solver)
		
		#3. step
		ss = new_weights - weights # = stepsize * searchDirection
		weights = new_weights
		
		#4. step
		yk = gxnew - gx
		
		#5. step
		# inverse B for next step
		FT = as.scalar(t(ss)%*%yk + t(yk)%*%B%*%yk)*ss%*%t(ss)/as.scalar(t(ss)%*%yk)^2
		ST = (B%*%(yk%*%t(ss)) + (ss%*%t(yk))%*%B)/as.scalar(t(ss)%*%yk)
				
		B = B + FT - ST
		
		diff = abs(fx - fxnew)
		debug("diff is " + diff)
		debug("arima css = " + fxnew + " with weights:\n" +toString(new_weights, decimal=17))
		
		fx = fxnew
		gx = gxnew
		norm_gx = L2norm(gx)
		iter =+ 1
	}
	debug("global best " + fx)
}

#inserts the first column of source matrix into the n-th column of target matrix with the specified row offset 
addShiftedMatrix = function (Matrix[Double] targetMatrix, Matrix[Double] sourceMatrix, Integer rowOffset, Integer nthColumn) return (Matrix[Double] targetMatrix){
	targetMatrix[rowOffset+1:nrow(targetMatrix), nthColumn] = sourceMatrix[1:nrow(targetMatrix)-rowOffset, 1]	
}


addValuesForCombinedModel = function (Matrix[Double] targetMatrix, Matrix[Double] sourceMatrix, Integer nonSeasonalParam, Integer seasonalParam, Integer seasonality, Integer columnOffset)return (Matrix[Double] targetMatrix){
	counter = 1
	for	(k in seq(1, nonSeasonalParam, 1)){
		for(j in seq(1, seasonalParam, 1)){
			targetMatrix = addShiftedMatrix(targetMatrix, sourceMatrix, k + (j*seasonality), columnOffset + counter)
			counter+=1
		}
	}
	#for combination of non seasonal and seasonal model the sign has to be inverted:
	if (nonSeasonalParam>0&seasonalParam>0) {
		targetMatrix[,columnOffset+1:columnOffset+nonSeasonalParam*seasonalParam] = -targetMatrix[,columnOffset+1:columnOffset+nonSeasonalParam*seasonalParam]
	}
}

difference = function (Matrix[Double] X, Integer d, Integer D, Integer s) return (Matrix[Double] X){
	# d-th order differencing:
	for(i in seq(1,d,1)){
		X = X[2:nrow(X),] - X[1:nrow(X)-1,]
	}

	# D-th order differencing:
	for(i in seq(1,D,1)){
		n1 = nrow(X)+0.0
		X = X[s+1:n1,] - X[1:n1-s,]
	}
}

#Construts Matrix Z with all values that can be used to calculate an approximation of the timeseries in X. 
#Each row in Z is used to predict the same value in the corresponding row of X
#Columns of Z represent values used for predicting either AR, SAR, MA or SMA
#p+P cols for ar & sar 
#q+Q cols for ma & sma 
#p*P cols as tmp parameter when combining season and non seasonal AR
constructPredictorMatrix = function (Matrix[Double] X, Integer p, Integer P, Integer q, Integer Q, Integer s)return( Matrix[Double] Z){
	Z = matrix(0, nrow(X), p+P+Q+q+p*P+q*Q)

	# fills Z with values used for non seasonal AR prediction
	for	(i in seq(1, p, 1)){
		Z = addShiftedMatrix(Z, X, i, i)
	}

	#prediction values for seasonal AR 
	for(i in seq(1, P, 1)){
		Z = addShiftedMatrix(Z, X, (i * s), p + i)
	}

	#prediction values for combined models of non-seasonal and seasonal AR
	Z = addValuesForCombinedModel (Z, X, p, P, s, p + P)

	#prediction values for non seasonal MA 
	for(i in seq(1, q, 1)){
		Z = addShiftedMatrix(Z, X, i, p + P + p*P + i)
	}

	#prediction values for seasonal MA 
	for(i in seq(1,Q, 1)){
		Z = addShiftedMatrix(Z, X, (i * s), p + P + p*P + q + i)
	}

	#prediction values for combined models of non-seasonal and seasonal MA
	Z = addValuesForCombinedModel (Z, X, q, Q, s, p + P + p*P + q + Q )
}

#input col of time series data
X = read($X)
solver = ifdef($solver, "jacobi")	
optim_method = ifdef($optim_method, "bfgs")
max_func_invoc = ifdef($max_func_invoc, 1000)
dest = ifdef($dest, "arima-results.csv")
result_format = ifdef($result_format, "csv")

#non-seasonal order
p =	ifdef($p, 0)
d = ifdef($d, 0)
q = ifdef($q, 0)

#seasonal order
P = ifdef($P, 0)
D = ifdef($D, 0)
Q = ifdef($Q, 0)

#length of the season
s = ifdef($s, 1)	
	
debug ("p= " + p)
debug ("d= " + d)
debug ("q= " + q)
debug ("P= " + P)
debug ("D= " + D)
debug ("Q= " + Q)
debug ("s= " + s)
debug ("solver= " + solver)
debug ("optim_method= " + optim_method)
debug ("source= " + $X)
debug ("dest= " + dest)
debug ("result_format= " + result_format)


#TODO: check max_func_invoc < totparamcols --> print warning (stop here ??)

num_rows = nrow(X)
debug("nrows of X: " + num_rows)

if(num_rows <= d){
	warning("non-seasonal differencing order should be smaller than length of the time-series")
}
if(num_rows <= s*D){
	warning("seasonal differencing order should be smaller than number of observations divided by length of season")
}

X = difference (X, d, D, s)

Z = constructPredictorMatrix(X, p, P, q, Q, s)

debug("Z Matrix of size "+nrow(Z)+"x"+ncol(Z)+":\n" + toString( cbind (seq(1,nrow(Z)), Z)))

#R does not use the first rows of Z where the values in columns for p or P are zero, so we cut of all those first rows
max_ar_lag = max(p, P*s, p+(P*s))

arima_model = eval(optim_method + "_optimizer", X[max_ar_lag+1:nrow(X)], Z[max_ar_lag+1:nrow(Z)], max_func_invoc, p, P, q, Q, s, solver)


#TODO: Add RMSE to output

colNames = as.frame("")
for (i in seq(1, p, 1)){
	colNames = rbind(colNames, as.frame("ar"+i))
}
for (i in seq(1, P, 1)){
	colNames = rbind(colNames, as.frame("sar"+i))
}
for (i in seq(1, q, 1)){
	colNames = rbind(colNames, as.frame("ma"+i))
}
for (i in seq(1, Q, 1)){
	colNames = rbind(colNames, as.frame("sma"+i))
}
print("Coefficients for SARIMA("+p+", "+d+", "+q+")("+P+", "+D+", "+Q+") with seasonality s="+s+":\n" + toString(cbind(colNames[2:p+P+q+Q+1, ], as.frame(arima_model)), decimal=15))
write(arima_model, dest, format=result_format)



debug = function (String msg){
	verbosePrint("INFO: " + msg)
}
warning = function (String msg){
	print("WARNING: " + msg)
}
verbosePrint = function (String msg){
	verbose = ifdef($verbose, FALSE)
	if (verbose){
		print(msg)
	}
}