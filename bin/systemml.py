#!/usr/bin/python

import sys
import os
import shutil
import subprocess
from os.path import join, exists

# error help print
def print_usage_and_exit():
    this_script = sys.argv[0]
    print('Usage: ' + this_script + '<dml-filename> [arguments]')
    sys.exit(1)

# from http://stackoverflow.com/questions/1724693/find-a-file-in-python
def find_file(name, path):
    for root, dirs, files in os.walk(path):
        if name in files:
            return os.path.join(root, name)
    return None

if not(len(sys.argv) >= 1):
    print('Wrong usage')
    print_usage_and_exit()




# find the systemML root path which contains the bin folder, the script folder and the target folder
# tolerate path with spaces
script_dir = os.path.dirname(os.path.realpath(__file__))
project_root_dir = os.path.dirname(script_dir)
user_dir = os.getcwd()

scripts_dir = join(project_root_dir, 'scripts')
build_dir = join(project_root_dir, 'target')
lib_dir = join(build_dir, 'lib')
dml_script_class = join(build_dir, 'classes', 'org', 'apache', 'sysml', 'api', 'DMLScript.class')

build_err_msg = 'You must build the project before running this script.'
build_dir_err_msg = 'Could not find target directory ' + build_dir + '. ' + build_err_msg

list_of_libraries = [f for f in os.listdir(lib_dir) if os.path.isfile(join(lib_dir, f))]
lib_dir_err_msg = 'Could not find required libraries\n' + '\n'.join(list_of_libraries) + '\n' + build_err_msg
dml_script_err_msg = 'Could not find ' + dml_script_class + '. ' + build_err_msg

# check if the project had been built and the jar files exist
if not(exists(build_dir)):
    print(build_dir_err_msg)
    sys.exit(1)
if not(exists(lib_dir)):
    print(lib_dir_err_msg)
    sys.exit(1)
if not(exists(dml_script_class)):
    print(dml_script_err_msg)
    sys.exit(1)

print('================================================================================')

# if the present working directory is the project root or bin folder, then use the temp folder as user.dir
if user_dir == project_root_dir or user_dir == join(project_root_dir, 'bin'):
    user_dir = join(project_root_dir, 'temp')
    print('Output dir: ' + user_dir)

# if the SystemML-config.xml does not exist, create it from the template
systemml_config_path = join(project_root_dir, 'conf', 'SystemML-config.xml')
systemml_template_config_path = join(project_root_dir, 'conf', 'SystemML-config.xml.template')
if not(exists(systemml_config_path)):
    shutil.copyfile(systemml_template_config_path, systemml_config_path)
    print('... created ' + systemml_config_path)

# if the log4j.properties do not exist, create them from the template
log4j_properties_path = join(project_root_dir, 'conf', 'log4j.properties')
log4j_template_properties_path = join(project_root_dir, 'conf', 'log4j.properties.template')
if not(exists(log4j_properties_path)):
    shutil.copyfile(log4j_template_properties_path, log4j_properties_path)
    print('... created ' + log4j_properties_path)


script_file = sys.argv[1]

# if the script file path was omitted, try to complete the script path
if not(exists(script_file)):
    script_file_name = os.path.abspath(script_file)
    script_file_found = find_file(script_file, scripts_dir)
    if script_file_found is None:
        print('Could not find DML script: ' + script_file)
        print_usage_and_exit()
    else:
        script_file = script_file_found
        print('DML Script:' + script_file)

# add libraries which were generated by the build to the classpath
classpath = '"' + join(lib_dir, '*') + '"'
#systemml_jar = '"'  + join(build_dir, 'classes') + '"'
systemml_jar = '"'  + join(build_dir, 'SystemML.jar') + '"'
classpath = classpath + ':' + systemml_jar

print('================================================================================')

# Set default Java options
systemml_default_java_opts = \
    '-Xmx8g -Xms4g -Xmn1g ' + \
    '-cp ' + classpath + ' ' + \
    '-Dlog4j.configuration=file:' + log4j_properties_path + ' ' \
    '-Duser.dir=' + user_dir


# Add any custom Java options set by the user at command line, overriding defaults as necessary.

if 'SYSTEMML_JAVA_OPTS' in os.environ:
    systemml_java_opts = os.environ['SYSTEMML_JAVA_OPTS']
    systemml_default_java_opts = systemml_default_java_opts + ' ' + systemml_java_opts
    del os.environ['SYSTEMML_JAVA_OPTS']

# Invoke the jar with options and arguments
cmd = ['java', systemml_default_java_opts, 'org.apache.sysml.api.DMLScript', '-f', script_file, '-exec singlenode', '-config', systemml_config_path] + sys.argv[1:]
print(' '.join(cmd))

#return_code = subprocess.call(cmd)
return_code = os.system(' '.join(cmd))

if return_code != 0:
    print('Failed to run SystemML. Exit code :' + str(return_code))
    print(' '.join(cmd))
